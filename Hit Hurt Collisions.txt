Here we need to collect on our thoughts on how collisions between hit and hurt boxes should work

Firstly, we'll have to do collisions during the end step, that way we're sure all actors have had their positions updated. Part of the problem here is we need to commit to a design choice. Should characters be able to be hit by more than one hitbox while injured? We may need to make a system that's flexible so we can easily do either. It makes a lot of sense for the enemies to be vulnerable to hits during their hurt state since it's fun to beat up on enemies, but the player should be invulnerable while hurt since it's not fun to get hit while you're already "hit". 

We're going to make hitboxes detect and affect the target rather than the actor detecting hitboxes. The reason for doing this is because projectiles are annoying if we want them to be destroyed after hitting something. If the projectile does all the work, the projectile can set the actor to its hit state, create an explosion effect in its place, and then delete itself.

To handle detecting if an actor has already hit a hitbox, actors will have a list of hitboxes they have hit. When a hitbox collides with an actor, the hitbox will check to see if the actor already has the hitbox in its list. If it doesn't, it adds itself to that list and executes its code. Every frame, actors will check to see if all the hitboxes in their list still exist, and delete the ones that don't. I'm not sure if this check should be the beginning or the ends step, or the step?? Does it matter? We're putting hitbox detecting in the end step, so lets put actor hitbox deletion in the begin step. I don't have a strong reason for that.

Getting hurt system:

First, an actor (hitbox, enemy, whatever) detects if it has hit its target during its end step. For example, o_emy objects will detect if they have are colliding with o_player. If true, then the act_hurt_act script will be called. This script is what checks if they actor has a state_hurt, and if the actor already has the offending actor stored in its hitboxes_struck list. If the offending actor is not in the list, the script continues.

The act_hurt_act script is essentially the script_change of the hurt state. But unlike the change script we can call this from different places depending on what's hurting the actor. We want actors to get flung around when they get hit, like smash brothers, so this script will set velocities for the actor. We also lock input for this state. It will also reset the count timer to whatever the state is set for. This count time is the amount of frames the actor will be "hurt". 

___________________________________________
############################################################################################
FATAL ERROR in
action number 1
of  Step Event2
for object o_hitbox:

DoConv :1: illegal undefined/null use
 at gml_Object_o_hitbox_Step_2 (line 6) -               scr_hitbox_hurt_act(id, target, v_hitbox_damage, v_hitbox_hitter.x, v_hitbox_stun);
############################################################################################
--------------------------------------------------------------------------------------------
stack frame is
gml_Object_o_hitbox_Step_2 (line 6)
