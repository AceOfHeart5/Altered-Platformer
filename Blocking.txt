It's not clear if blocking is going to be hard or not. I'm positive we will need to create "block boxes" which are similar to hitboxes. What I kind of want to do is let blockers get knocked back similar to how getting hit knocks back. So we'll obviously need a blocking state, but do we want the ability to create block boxes that aren't connected to anyone? We could easily just have a variable in block boxes, and check if that variable is defined. This does mean, however, that hitboxes will be doing even more work as they'll be checking for block boxes as well. Perhaps that's ok.

So in the hitbox step event, we'll check to see if the hitbox is colliding with a block box. We'll also have to figure out a way to make sure that it only collides with specific block boxes, so enemies can't block enemies. I'm sure we can just do that the same way hitboxes detect only certain actors. It won't be enough to just check if it's colliding though. We also need to make sure that it isn't colliding with a target actor, or if it is, certain criteria are met. Consider this: When a character swings a sword, that sword hitbox is very long, it could easily extend through a targets shield and into their body. But we want something like this to count as blocking. So we have to check the position of the hitter with the position of the target to see if the block box is between them, in which case we'd ignore the fact that the hitbox is colliding with the target, and consider this a block. We'll probably have to figure out some more edge cases, like detecting hitbox position for projectiles. 

For the blocking state, we're going to go ultra simple for starters. One unanimated sprite. press block button to enter block state, let go to leave. The block state will only make one block box. Block boxes will store the value of the blocker as well as the blocking state when they are created (man I kinda wish GameMaker had proper constructors). A step event of the block box will detect if the actor is still in the block state, if they are not, the block deletes itself. We will probably have to do this in the begin step event since hitboxes will be detecting blocks in the end step, and we can't have them both running logic in the same step event. However, if we use the begin step for block deletion, that means that there is one frame where the actor is not in the block state, but the block object still exists. Hitboxes will have to not only check if they have collided with blocks, but also if the actor tied to them is still defending. 
This self deletion is similar to how hitboxes delete themselves if the actor throwing them is no longer in the attack state.

Actually, what we could do is have the continue check for the block state check a variable instead of the block button. In the run state we'll check to see if the block button is still pressed. If it's not, we'll delete the block. This means that releasing block will lag one frame, but it also means blocks won't have to check if the actor is still blocking. 

We've encountered a problem. How exactly will the actor behave after blocking a hitbox? In my mind the actor freeze frames (along with the actor throwing the hitbox) then moves a distance away similar to how actors move away when hurt. Well here's something to note: that hitbox is still there. Let's use our sword example from earlier. The hitbox is so long, it extends way passed the block and into the actors body. Even if we get the actor to freeze frame and start moving away, the hitbox and block are stilling colliding with one another. So the actor, or the block, or something, has to keep track of that hitbox so that it is ignored until... I dunno. Whenever we want it to stop being ignored. That's something we should figure out now. Let's decide that blocking can have knockback just like the hurt state. And just like the hurt state, there is a "block time" (instead of hurt time). I think it'd be smart to make the block time based off the stun time of a hitbox (maybe we should do the same thing with the hurt state?). let's try 5x the hitbox_stun value. 

We've collected our thoughts better. Blocks will hold a list of hitboxes they have blocked. When a hitbox checks for targets, it will also check for blocks. If the hitbox is colliding with a block that fulfills the criteria for blocking a hitbox (in between the hitter and the target), then the hitbox will be counted as "blocked". The blocked hitbox will then check to see if the block already contains this hitbox in a list of hitboxes_blocked. If it is already there, nothing happens. But if it is not, we will add that hitbox to the list, play the block sound and animation, freeze frame the two actors (if applicable), and apply knockback velocity and time to the target actor. Let's make sure to add the knockback time rather than set it so a little hit can't overwrite the intense knockback of a larger hit. Similar to how the hurt state works, the hitboxes_blocked list will need to be cleared. Each frame the block will iterate over every hitbox in the list. If that hitbox no longer exists, it's removed from the list. When the states block_time reaches 0, the entire list will be cleared. We don't need to worry about clearing the list when the actor stops blocking because the block is destroyed when the actor stops blocking.

This actually means we should change how hitboxes do hits. Instead of a big if statement that we only enter if there's a valid target, we should make two lists. One for "blocks" and one for "hits". We'll do blocks first. The list of blocks will be created from: 

blocks that collide with hitbox and not target
collide with both but the block is between the target and the hitter
collide with both, hitter is not defined, but block is between target and hitbox

And for all of these that return true, we also check to see if the hitbox is already stored in the block. If it is, we don't include that block collision in the list. That's because we don't need to do anything with blocks that are stored. They are totally ignored.

Next is target hits, the list of targets will be created from:

targets that collide with hitbox and no blocks
targets that collide with block and target but target is between block and hitter
targets that collide with both, but hitter is undefined and target is between block and hitbox

Similar to blocks, we will remove targets from this list (actors) that already contain this hitbox in their hitboxes_struck list, because we can totally ignore actors that already contain this hitbox

Once these two lists are complete, we simply need to iterate through both, add the hitbox to the actor/block, apply knockback and stun time to the actor, and create the appropriate sounds and effects.






























