We need to solidify our design for "spawning" in this game.

When the player dies, they will have to respawn at some kind of checkpoint. Or at least, that's what we want right? It's not clear yet how complex our save system is going to be. We've said to ourselves that we won't do open world, just level to level style stuff. However we just made doors... no need for doors in a level to level style game. It would be very cool if we could create a save/spawn system similar to metroid. However... given our vision for this game, the player wouldn't be able to choose their save/spawn locations. We decide that, and they will basically be linear checkpoints. But if we make it flexible we could have many different types of points be "spawn points". Normally it will just be the elevators that each level will start with. We already know how to fade the screen out, change rooms, and set the player position. What would be cool is if there was an easy way to store a point as the spawn, as well as whatever cool sequence we want to play out when respawning. 

So what do we already know how to store? We already can store a room, and an object, as well as any data about that object. To move to a door, we run a script that takes the door as an argument. We might be able to say the door is like the "spawn" object in this case. We could store the transition script needed for a spawn object inside the object itself. So we'd have something like:

o_spawn
// vars
v_spawn_script

But there's more to it than that isn't there. When we go to a door, there are 3 things involved: the script, the door, and the o_transition. The script makes the o_transition object and assigns the door argument to the o_transition, which then uses the data in it do what it needs to. An interesting point is we make a specific script for each specific o_transition object since the data in the argument has to be specially assigned to the o_transition object during the script. 

Ok, so since our player needs to be able to access their spawn at any time, the spawn object will have to be stored in a global variable in a persistent object. o_global should be fine for this. Now, since the scripts are specific to the object, we don't need to worry about keeping track of which o_transition to call, since the script is specially made to only call the correct one. And we can store the script of the spawn object in the spawn. So..... if our spawn object looks like this:

o_spawn
//vars
v_spawn_script

and our spawn script looks like this:

scr_transition_spawn_type(o_spawn) {
	with(instance_create_depth(x, y, 90, o_transition_spawn_type)) {
		/* assign vars in o_transition_spawn_type to whatever we need using the data stored in the o_spawn argument
		*/
	}
}

Then we've got our plan. The o_transition_spawn_type object can be programmed to do whatever we want. We can set the global_spawn variable to a specific instance in the initialize code, and we can reassign it to whatever we need to during gameplay. Like if we have a campfire as a spawn/save point. In the step event of the campfire we could just do:

if (player interacts with campfire) global_spawn = campfireID;

Bam!

We learned something while coding, you have to store the room of the spawn in a global variable as well. It's not possible to tell the game to room_goto(spawn.v_room) because we aren't in the room with the spawn object yet, so we can't reference it. A global_spawn_room is needed as well.

Note for the morning, we are working on why the elevator isn't being set lower in the o_transition_elevator. It looks like the change the elevator y position doesn't stick.